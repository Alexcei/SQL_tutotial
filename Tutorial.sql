База данных - структурированный набор постоянно хранимых данных.
SQL - structured query language - язык структурированных запросов.
Реляционные бд - состоят из друхмерных таблиц
Строки - записи
Столбцы - поля
Первичный ключ - ID
SQL - яп
- интерактивный - внутри бд
- статический - для доступа к бд из вне
- динамический - для доступа к бд из вне
Типы данных
- INT - целые
- VARCHAR(10) - строка с текстом длянной 10 (SACII)
- NVARCHAR - Unicode – каждый символ занимает 2 байта
- DATE - дата
Оператор - команда - предложение с ключивыми словами
- DDL (Data Definition Language) - создают объекты. Определяют структуру.
- DML (Data Manipulation Language) - управляют значениями в таблицах
- DCL (Data Control Language) - управление доступом
- TCL (Transaction Control Language) - управление изменениями в данных

NULL - запись отсутствует

SELECT Аргументы FROM Арг WHERE условие;

GROUP BY - разбивка по группам. При этом можно использовать агрегатные функции SUM, AVG, MAX.

Агрегатные функции - ф-и возвращающие одиночное значение на основании множества записей
COUNT(*) - кол-во строк источника записей
COUNT - кол-во значений в указанном столбце

HAVING - условие для группы строк (после GROUP BY)

DISTINCT - возвращает уникальные значения

UNION - объединение результатов двух запросов

INTERSECT - пересечение двух множеств

EXCEPT - для нахождения разности двух множеств

JOIN - оператор соединения
INNER JOIN - (внутреннее соединение) соединяет две таблицы
LEFT JOIN - (внешнее соединение) левая таблица полная, в правой будут нули если нет соответствия.
FULL JOIN - оператор полного внешнего соединения
CROSS JOIN - перекресное соединение (декартово произведение)

EXISTS - возвращает истину если запрос возвращает один или более строк.

Оконные функции это функции, которые позволяют осуществлять вычисления 
в заданном диапазоне строк внутри предложения Select.
Окно – значит набор строк, в рамках которого происходит вычисление.
Оконная функция позволяет разбивать весь набор данных на такие окна.
(функция (например sum) OVER окно)
Оконная функция (столбец для вычислений) OVER ([PARTITION BY столбец для группировки]
	[ORDER BY столбец для сортировки]
	[ROWS или RANGE выражение для ограничения строк в пределах группы])
row_number() OVER (PARTITION BY section ORDER BY score DESC)  AS rating_in_section
PARTITION BY - подсчет в каждой группе отдельно

Репликация - синхронизация между несколькими серверами с данными.
Изменения, сделанные в одной копии объекта, могут быть распространены в другие копии.

Нормальная форма определяется как совокупность требований, которым должно удовлетворять отношение в БД.

Нормализация - процесс преобразования отношений базы данных к виду, отвечающему нормальным формам.

Денормализация — намеренное приведение структуры базы данных в состояние,
не соответствующее критериям нормализации,
обычно проводимое с целью ускорения операций чтения из базы за счет добавления избыточных данных.

Журнал транзакций - фиксируются все транзакции и производимые ими в базе изменения.
Если система даст сбой, этот журнал поможет вам вернуть базу данных в согласованное состояние.
Свойства транзакций:
- Атомарность
- непротиворечивость (согласованность) транзакция переводит базу из одного согласованного состояния в другое согласованное.
- изолированность (транзакции проходят независимо друг от друга)
- устойчивость (даже сбой системы не повлияет на состояние транзакции)

Триггер - SQL процедура, которая срабатывает при каком-либо событии (INSERT, DELETE, UPDATE).
СУБД автоматически вызывает его после модификации данных и не может быть выполнен вручную.

Курсор - объект БД позволяющий работать с записями по-одному
- определить курсор
- открыть
- получить запись из курсора
- обработать запись
- закрыть курсор

PRIMARY - не разрешает NULL записей
UNIQUE - разрешает одну

SHOW databases; - показать все бд

CREATE DATABASE Name; - создать бд

DROP DATABASE Name; - удалить бд

USE Name; - использовать бд Name

CREATE TABLE colom_name(id INT, fname VARCHAR(30), dates DATE); - создать таблицу

DROP TABLE colom_name; - удалить таблицу

DESC name_table; - выводит инфу о таблице

INSERT INTO name_table VALUES (1, 'Name', 01.01.2008); - заполнить таблицу

INSERT INTO name_table (fname, dates) VALUES ('name'); - заполнить конкретные поля

SELECT * FROM name_table; - вывести всю таблицу

SELECT name, price FROM product
	WHERE param = 7; >= OR AND LIKE

SELECT price FROM product
	WHERE name LIKE '%ok'; - вывести где name заканчивается на *ok

SELECT price FROM product
	WHERE name LIKE 'nam_'; - вывести где nam_ + любая буква. Можно (_a%)

SELECT price FROM product
	WHERE name IN ('sasha', 'petia'); - вместо = AND =

SELECT name FROM product
	WHERE NOT price BETWEEN (5, 10);

DELETE FROM name_table - удалить записи
	WHERE price > 100; 

UPDATE name SET - изменить значения 
	price = 100
	WHERE name = 'fruts'

Нормализованная таблица - Первичный ключ(Каждая запись должна содержать свой уникальный номер)
                        - Атомарность данных(Данные должны быть разбиты на наиболее эффективные части)

CREATE TABLE name (id INT AUTO_INCREMENT, PRIMARY KEY (id)); - авто id + Первичный ключ

ALTER TABLE name - изменить таблицу
ADD COLUMN is id AUTO_INCREMENT FIRST, - на первом месте
ADD PRIMARY KEY (id)
